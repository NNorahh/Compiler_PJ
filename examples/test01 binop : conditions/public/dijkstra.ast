A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar INF:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 65535;

	|--A_programElement 
		|--A_structDef struct array2D {

			|--A_varDecl 
				|--A_varDeclArray a[16]:
				|--A_type int
}

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray e[16]:
				|--A_type array2D;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray book[16]:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray dis[16]:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar n:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar m:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar v1:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar v2:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar w:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn Dijkstra(
				|--A_paramDecl ){

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<=
								|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal dis[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal 
											|--A_memberExpr 
											|--A_leftVal 
												|--A_arrayExpr 
												|--A_leftVal e[
													|--A_indexExpr 1].a[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal book[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal book[
							|--A_indexExpr 1] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<=
								|--A_exprUnit (
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit n-
											|--A_arithExpr 
												|--A_exprUnit 1))){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar min_num:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit INF;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar min_index:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar k:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit k<=
										|--A_exprUnit n)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolExpr 
										|--A_boolBiOpExpr 
											|--A_boolExpr 
												|--A_boolUnit (
													|--A_comExpr 
														|--A_exprUnit min_num>
														|--A_exprUnit 
															|--A_arrayExpr 
															|--A_leftVal dis[
																|--A_indexExpr k])&&
											|--A_boolExpr 
												|--A_boolUnit (
													|--A_comExpr 
														|--A_exprUnit 
															|--A_arrayExpr 
															|--A_leftVal book[
																|--A_indexExpr k]==
														|--A_exprUnit 0)){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal min_num = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit 
														|--A_arrayExpr 
														|--A_leftVal dis[
															|--A_indexExpr k];

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal min_index = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit k;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal k = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit k+
												|--A_arithExpr 
													|--A_exprUnit 1;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal book[
									|--A_indexExpr min_index] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar j:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit j<=
										|--A_exprUnit n)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit 
													|--A_arrayExpr 
													|--A_leftVal 
														|--A_memberExpr 
														|--A_leftVal 
															|--A_arrayExpr 
															|--A_leftVal e[
																|--A_indexExpr min_index].a[
														|--A_indexExpr j]<
												|--A_exprUnit INF)){

									|--A_codeBlockStmt 
										|--A_ifStmt if(
											|--A_boolExpr 
												|--A_boolUnit (
													|--A_comExpr 
														|--A_exprUnit 
															|--A_arrayExpr 
															|--A_leftVal dis[
																|--A_indexExpr j]>
														|--A_exprUnit (
															|--A_arithExpr 
																|--A_arithBiOpExpr 
																	|--A_arithExpr 
																		|--A_exprUnit 
																			|--A_arrayExpr 
																			|--A_leftVal dis[
																				|--A_indexExpr min_index]+
																	|--A_arithExpr 
																		|--A_exprUnit 
																			|--A_arrayExpr 
																			|--A_leftVal 
																				|--A_memberExpr 
																				|--A_leftVal 
																					|--A_arrayExpr 
																					|--A_leftVal e[
																						|--A_indexExpr min_index].a[
																				|--A_indexExpr j]))){

											|--A_codeBlockStmt 
												|--A_assignStmt 
													|--A_leftVal 
														|--A_arrayExpr 
														|--A_leftVal dis[
															|--A_indexExpr j] = 
													|--A_rightVal 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit 
																		|--A_arrayExpr 
																		|--A_leftVal dis[
																			|--A_indexExpr min_index]+
																|--A_arithExpr 
																	|--A_exprUnit 
																		|--A_arrayExpr 
																		|--A_leftVal 
																			|--A_memberExpr 
																			|--A_leftVal 
																				|--A_arrayExpr 
																				|--A_leftVal e[
																					|--A_indexExpr min_index].a[
																			|--A_indexExpr j];
}
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j+
												|--A_arithExpr 
													|--A_exprUnit 1;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 53);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal n = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal m = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<=
								|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar j:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit j<=
										|--A_exprUnit n)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit i==
												|--A_exprUnit j)){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal 
												|--A_arrayExpr 
												|--A_leftVal 
													|--A_memberExpr 
													|--A_leftVal 
														|--A_arrayExpr 
														|--A_leftVal e[
															|--A_indexExpr i].a[
													|--A_indexExpr j] = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit 0;
}else{

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal 
												|--A_arrayExpr 
												|--A_leftVal 
													|--A_memberExpr 
													|--A_leftVal 
														|--A_arrayExpr 
														|--A_leftVal e[
															|--A_indexExpr i].a[
													|--A_indexExpr j] = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit INF;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j+
												|--A_arithExpr 
													|--A_exprUnit 1;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<=
								|--A_exprUnit m)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar u:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall getint();

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar v:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall getint();

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal 
									|--A_memberExpr 
									|--A_leftVal 
										|--A_arrayExpr 
										|--A_leftVal e[
											|--A_indexExpr u].a[
									|--A_indexExpr v] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall getint();

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall Dijkstra();

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<=
								|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal dis[
											|--A_indexExpr i]);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 32);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 91);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
