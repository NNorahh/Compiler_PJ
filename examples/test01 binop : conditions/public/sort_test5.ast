A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar n:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn swap(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray array[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar j:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar temp:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal temp = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_arrayExpr 
								|--A_leftVal array[
									|--A_indexExpr i];

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal array[
							|--A_indexExpr i] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_arrayExpr 
								|--A_leftVal array[
									|--A_indexExpr j];

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal array[
							|--A_indexExpr j] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit temp;

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn heap_ajust(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray arr[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar start:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar end:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar dad:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal dad = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit start;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar son:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal son = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit dad*
										|--A_arithExpr 
											|--A_exprUnit 2+
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit son<
								|--A_exprUnit (
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit end+
											|--A_arithExpr 
												|--A_exprUnit 1))){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar temp:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit son+
											|--A_arithExpr 
												|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolBiOpExpr 
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit son<
												|--A_exprUnit end)&&
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit 
													|--A_arrayExpr 
													|--A_leftVal arr[
														|--A_indexExpr son]<
												|--A_exprUnit 
													|--A_arrayExpr 
													|--A_leftVal arr[
														|--A_indexExpr temp])){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal son = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit son+
												|--A_arithExpr 
													|--A_exprUnit 1;
}

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal arr[
												|--A_indexExpr dad]>
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal arr[
												|--A_indexExpr son])){

							|--A_codeBlockStmt 
								|--A_returnStmt ret 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 0;
}else{

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal dad = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_fnCall swap(
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit arr, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit dad, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit son);

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal dad = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit son;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal son = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit dad*
														|--A_arithExpr 
															|--A_exprUnit 2+
												|--A_arithExpr 
													|--A_exprUnit 1;
}
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn heap_sort(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray arr[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar len:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar tmp:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit len/
										|--A_arithExpr 
											|--A_exprUnit 2-
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i>
								|--A_exprUnit 
									|--A_arithUExpr -
										|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit len-
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall heap_ajust(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit arr, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit i, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit len-
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDecl 
								|--A_varDeclScalar tmp0:
								|--A_type int;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp0 = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall swap(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit arr, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit tmp0, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit i);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall heap_ajust(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit arr, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit tmp0, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 50);

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal n = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray a[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 0] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 4;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 1] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 3;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 2] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 9;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 3] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 2;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 4] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 5] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 6] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 6;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 7] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 5;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 8] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 7;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 9] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 8;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall heap_sort(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit a, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit n);

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDecl 
								|--A_varDeclScalar tmp:
								|--A_type int;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal a[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 10;

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 66);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
