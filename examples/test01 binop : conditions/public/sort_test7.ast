A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar n:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn Merge(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray array[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar low:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar middle:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar high:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar n1:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal n1 = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit middle-
										|--A_arithExpr 
											|--A_exprUnit low+
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar n2:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal n2 = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit high-
								|--A_arithExpr 
									|--A_exprUnit middle;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray L[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray R[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar j:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal j = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar temp:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit n1)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal temp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit low;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal L[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal array[
											|--A_indexExpr temp];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit j<
								|--A_exprUnit n2)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal temp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j+
												|--A_arithExpr 
													|--A_exprUnit middle+
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal R[
									|--A_indexExpr j] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal array[
											|--A_indexExpr temp];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal j = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit j+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal j = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar k:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal k = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit low;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit i!=
												|--A_exprUnit n1))&&
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit j!=
												|--A_exprUnit n2))){

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal L[
												|--A_indexExpr i]<
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit 
															|--A_arrayExpr 
															|--A_leftVal R[
																|--A_indexExpr j]+
													|--A_arithExpr 
														|--A_exprUnit 1))){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal 
										|--A_arrayExpr 
										|--A_leftVal array[
											|--A_indexExpr k] = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_arrayExpr 
												|--A_leftVal L[
													|--A_indexExpr i];

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal k = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit k+
												|--A_arithExpr 
													|--A_exprUnit 1;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal i = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i+
												|--A_arithExpr 
													|--A_exprUnit 1;
}else{

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal 
										|--A_arrayExpr 
										|--A_leftVal array[
											|--A_indexExpr k] = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_arrayExpr 
												|--A_leftVal R[
													|--A_indexExpr j];

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal k = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit k+
												|--A_arithExpr 
													|--A_exprUnit 1;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j+
												|--A_arithExpr 
													|--A_exprUnit 1;
}
}

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit n1)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal array[
									|--A_indexExpr k] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal L[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal k = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit k+
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit j<
								|--A_exprUnit n2)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal array[
									|--A_indexExpr k] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal R[
											|--A_indexExpr j];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal k = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit k+
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal j = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit j+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn MergeSort(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray array[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar p:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar q:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit p<
								|--A_exprUnit q)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDecl 
								|--A_varDeclScalar mid:
								|--A_type int;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal mid = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit (
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit p+
														|--A_arithExpr 
															|--A_exprUnit q)/
										|--A_arithExpr 
											|--A_exprUnit 2;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDecl 
								|--A_varDeclScalar tmp:
								|--A_type int;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall MergeSort(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit array, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit p, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit mid);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit mid+
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall MergeSort(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit array, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit tmp, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit q);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall Merge(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit array, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit p, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit mid, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit q);
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 71);

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal n = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray a[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 0] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 4;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 1] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 3;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 2] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 9;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 3] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 2;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 4] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 5] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 6] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 6;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 7] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 5;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 8] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 7;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 9] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 8;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar tmp:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal tmp = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit n-
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall MergeSort(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit a, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit i, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit tmp);

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal a[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal tmp = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 10;

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit tmp);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 97);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
