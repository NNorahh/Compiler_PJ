A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar ascii_0:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 48;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn my_getint(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar sum:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar c:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 1>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal c = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_fnCall getch()-
										|--A_arithExpr 
											|--A_exprUnit ascii_0;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolBiOpExpr 
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit c<
												|--A_exprUnit 0)||
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit c>
												|--A_exprUnit 9)){

							|--A_codeBlockStmt continue;
}else{

							|--A_codeBlockStmt break;
}
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal sum = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit c;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 1>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal c = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_fnCall getch()-
										|--A_arithExpr 
											|--A_exprUnit ascii_0;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolBiOpExpr 
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit c>=
												|--A_exprUnit 0)&&
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit c<=
												|--A_exprUnit 9)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal sum = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit sum*
														|--A_arithExpr 
															|--A_exprUnit 10+
												|--A_arithExpr 
													|--A_exprUnit c;
}else{

							|--A_codeBlockStmt break;
}
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit sum;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit x-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit x/
													|--A_arithExpr 
														|--A_exprUnit y)*
									|--A_arithExpr 
										|--A_exprUnit y;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn my_putint(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int){

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray b[16]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar i:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit a>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal b[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_fnCall mod(
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit a, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit 10)+
										|--A_arithExpr 
											|--A_exprUnit ascii_0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal a = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit a/
										|--A_arithExpr 
											|--A_exprUnit 10;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal b[
											|--A_indexExpr i]);
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 51);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar n:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall my_getint();

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit n>
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar m:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall my_getint();

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall my_putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit m);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 10);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal n = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit n-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 58);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
