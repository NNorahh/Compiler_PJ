A_program 
	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn canJump(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray nums[10]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit n==
								|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 
									|--A_arrayExpr 
									|--A_leftVal nums[
										|--A_indexExpr 0]>
								|--A_exprUnit (
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit n-
											|--A_arithExpr 
												|--A_exprUnit 2))){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray dp[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit (
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit n-
											|--A_arithExpr 
												|--A_exprUnit 1))){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal dp[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar temp:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit n-
									|--A_arithExpr 
										|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal dp[
							|--A_indexExpr temp] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit n-
								|--A_arithExpr 
									|--A_exprUnit 2;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i>
								|--A_exprUnit 
									|--A_arithUExpr -
										|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDecl 
								|--A_varDeclScalar j:
								|--A_type int;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal nums[
												|--A_indexExpr i]<
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_arithBiOpExpr 
															|--A_arithExpr 
																|--A_exprUnit n-
															|--A_arithExpr 
																|--A_exprUnit 1-
													|--A_arithExpr 
														|--A_exprUnit i))){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_arrayExpr 
												|--A_leftVal nums[
													|--A_indexExpr i];
}else{

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit n-
														|--A_arithExpr 
															|--A_exprUnit 1-
												|--A_arithExpr 
													|--A_exprUnit i;
}

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit j>
										|--A_exprUnit 
											|--A_arithUExpr -
												|--A_exprUnit 1)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal temp = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i+
												|--A_arithExpr 
													|--A_exprUnit j;

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit 
													|--A_arrayExpr 
													|--A_leftVal dp[
														|--A_indexExpr temp]!=
												|--A_exprUnit 0)){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal 
												|--A_arrayExpr 
												|--A_leftVal dp[
													|--A_indexExpr i] = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit 1;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j-
												|--A_arithExpr 
													|--A_exprUnit 1;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_arrayExpr 
							|--A_leftVal dp[
								|--A_indexExpr 0];
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 42);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar res:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray a[10]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 0] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 3;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 1] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 3;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 2] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 9;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 3] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 4] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 5] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 6] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 7] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 5;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 8] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 7;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal a[
							|--A_indexExpr 9] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 8;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal res = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal res = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall canJump(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit a, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit res);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 49);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit res;
}
