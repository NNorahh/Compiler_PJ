A_program 
	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit x-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit x/
													|--A_arithExpr 
														|--A_exprUnit y)*
									|--A_arithExpr 
										|--A_exprUnit y;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn palindrome(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray a[4]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar j:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar flag:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal j = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit j<
								|--A_exprUnit 4)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal a[
									|--A_indexExpr j] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall mod(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit n, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 10);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal n = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit n/
										|--A_arithExpr 
											|--A_exprUnit 10;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal j = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit j+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal a[
												|--A_indexExpr 0]==
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal a[
												|--A_indexExpr 3])&&
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal a[
												|--A_indexExpr 1]==
										|--A_exprUnit 
											|--A_arrayExpr 
											|--A_leftVal a[
												|--A_indexExpr 2])){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal flag = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 1;
}else{

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal flag = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit flag;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 30);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar test:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal test = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1221;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar flag:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal flag = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall palindrome(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit test);

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit flag==
								|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit test);
}else{

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal flag = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit flag);
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal flag = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit flag);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 47);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
