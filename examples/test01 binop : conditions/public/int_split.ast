A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar N:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar newline:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit x-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit x/
													|--A_arithExpr 
														|--A_exprUnit y)*
									|--A_arithExpr 
										|--A_exprUnit y;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn split(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclArray a[4]:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit N-
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i!=
								|--A_exprUnit 
									|--A_arithUExpr -
										|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal a[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall mod(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit n, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 10);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal n = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit n/
										|--A_arithExpr 
											|--A_exprUnit 10;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 26);

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal N = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 4;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal newline = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar i:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar m:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray b[4]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal m = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 1478;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal m = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall split(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit m, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit b);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar t:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal i = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit 4)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal t = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal b[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit t);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit newline);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 42);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
