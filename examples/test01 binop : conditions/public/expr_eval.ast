A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar TOKEN_NUM:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar TOKEN_OTHER:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 1;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar last_char:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 32;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar num:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar other:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclScalar cur_token:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn next_char(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal last_char = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getch();

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit last_char;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn is_space(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar c:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit c==
										|--A_exprUnit 32)||
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit c==
										|--A_exprUnit 10)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;
}else{

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn is_num(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar c:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit c>=
										|--A_exprUnit 48)&&
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit c<=
										|--A_exprUnit 57)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;
}else{

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn next_token(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 
									|--A_fnCall is_space(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit last_char)!=
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall next_char();
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 
									|--A_fnCall is_num(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit last_char)!=
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal num = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit last_char-
										|--A_arithExpr 
											|--A_exprUnit 48;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_fnCall is_num(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit 
														|--A_fnCall next_char())!=
										|--A_exprUnit 0)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal num = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit num*
																|--A_arithExpr 
																	|--A_exprUnit 10+
														|--A_arithExpr 
															|--A_exprUnit last_char-
												|--A_arithExpr 
													|--A_exprUnit 48;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal cur_token = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit TOKEN_NUM;
}else{

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal other = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit last_char;

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall next_char();

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal cur_token = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit TOKEN_OTHER;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit cur_token;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn panic(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 112);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 97);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 110);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 105);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 99);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 33);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putch(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 10);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_arithUExpr -
								|--A_exprUnit 1;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn get_op_prec(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar op:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit op==
										|--A_exprUnit 43)||
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit op==
										|--A_exprUnit 45)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 10;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolBiOpExpr 
							|--A_boolExpr 
								|--A_boolBiOpExpr 
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit op==
												|--A_exprUnit 42)||
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit op==
												|--A_exprUnit 47)||
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit op==
										|--A_exprUnit 37)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 20;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn stack_push(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray s[256]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar v:
						|--A_type int){

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal s[
							|--A_indexExpr 0] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal s[
											|--A_indexExpr 0]+
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar temp:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_arrayExpr 
									|--A_leftVal s[
										|--A_indexExpr 0];

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal s[
							|--A_indexExpr temp] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit v;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn stack_pop(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray s[256]:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar temp:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_arrayExpr 
									|--A_leftVal s[
										|--A_indexExpr 0];

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar last:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_arrayExpr 
									|--A_leftVal s[
										|--A_indexExpr temp];

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal 
						|--A_arrayExpr 
						|--A_leftVal s[
							|--A_indexExpr 0] = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal s[
											|--A_indexExpr 0]-
								|--A_arithExpr 
									|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit last;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn stack_peek(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray s[256]:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar temp:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_arrayExpr 
									|--A_leftVal s[
										|--A_indexExpr 0];

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_arrayExpr 
							|--A_leftVal s[
								|--A_indexExpr temp];
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn stack_size(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray s[256]:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_arrayExpr 
							|--A_leftVal s[
								|--A_indexExpr 0];
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit x-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit x/
													|--A_arithExpr 
														|--A_exprUnit y)*
									|--A_arithExpr 
										|--A_exprUnit y;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn eval_op(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar op:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar lhs:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar rhs:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit op==
								|--A_exprUnit 43)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit lhs+
									|--A_arithExpr 
										|--A_exprUnit rhs;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit op==
								|--A_exprUnit 45)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit lhs-
									|--A_arithExpr 
										|--A_exprUnit rhs;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit op==
								|--A_exprUnit 42)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit lhs*
									|--A_arithExpr 
										|--A_exprUnit rhs;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit op==
								|--A_exprUnit 47)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit lhs/
									|--A_arithExpr 
										|--A_exprUnit rhs;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit op==
								|--A_exprUnit 37)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall mod(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit lhs, 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit rhs);
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn eval(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray oprs[256]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclArray ops[256]:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar i:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit i<
								|--A_exprUnit 256)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal oprs[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal ops[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit cur_token!=
								|--A_exprUnit TOKEN_NUM)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall panic();
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall stack_push(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit oprs, 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit num);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall next_token();

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit cur_token==
								|--A_exprUnit TOKEN_OTHER)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar op:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit other;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit 
											|--A_fnCall get_op_prec(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit op)==
										|--A_exprUnit 0)){

							|--A_codeBlockStmt break;
}

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall next_token();

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolExpr 
								|--A_boolBiOpExpr 
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit 
													|--A_fnCall stack_size(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit ops)!=
												|--A_exprUnit 0)&&
									|--A_boolExpr 
										|--A_boolUnit (
											|--A_comExpr 
												|--A_exprUnit 
													|--A_fnCall get_op_prec(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit 
																|--A_fnCall stack_peek(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit ops))>=
												|--A_exprUnit 
													|--A_fnCall get_op_prec(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit op))){

							|--A_codeBlockStmt 
								|--A_varDeclStmt let 
									|--A_varDef 
										|--A_varDefScalar cur_op:
										|--A_type int = 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 
													|--A_fnCall stack_pop(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit ops);

							|--A_codeBlockStmt 
								|--A_varDeclStmt let 
									|--A_varDef 
										|--A_varDefScalar rhs:
										|--A_type int = 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 
													|--A_fnCall stack_pop(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit oprs);

							|--A_codeBlockStmt 
								|--A_varDeclStmt let 
									|--A_varDef 
										|--A_varDefScalar lhs:
										|--A_type int = 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit 
													|--A_fnCall stack_pop(
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit oprs);

							|--A_codeBlockStmt 
								|--A_callStmt 
									|--A_fnCall stack_push(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit oprs, 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 
												|--A_fnCall eval_op(
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit cur_op, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit lhs, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit rhs));
}

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall stack_push(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit ops, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit op);

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolExpr 
								|--A_boolUnit (
									|--A_comExpr 
										|--A_exprUnit cur_token!=
										|--A_exprUnit TOKEN_NUM)){

							|--A_codeBlockStmt 
								|--A_returnStmt ret 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall panic();
}

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall stack_push(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit oprs, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit num);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall next_token();
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall next_token();

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit 
									|--A_fnCall stack_size(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit ops)!=
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar cur_op:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall stack_pop(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit ops);

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar rhs:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall stack_pop(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit oprs);

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar lhs:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall stack_pop(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit oprs);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall stack_push(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit oprs, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall eval_op(
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit cur_op, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit lhs, 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_exprUnit rhs));
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_fnCall stack_peek(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit oprs);
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 205);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar count:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall getch();

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall next_token();

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolExpr 
						|--A_boolUnit (
							|--A_comExpr 
								|--A_exprUnit count!=
								|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putint(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall eval());

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall putch(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 10);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal count = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit count-
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 214);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
